df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i == skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = 5, mu0 * nratio)
# generate subTADs
start = 530
end = 705
sbounds = c(start, start + 50, start + 130, end)
hic_mat = modify_dat(hic_mat, sbounds, skip_ind = 0, mu = mu0 * nratio * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true = tads_true[-5, ]  ## a gap
sub_tads <- data.frame('start' = sbounds[1:3],
'end' = sbounds[2:4]) * resl
hierTads = rbind(tads_true, sub_tads)
hierTads$dom_order = c(rep(1, nrow(tads_true)), rep(2, nrow(sub_tads)))
}
if(stype == 'poisson-dist-hier2'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rpois(1, mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i == skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = 5, mu0 * nratio)
# generate subTADs
start = 530
end = 705
sbounds = c(start, start + 25, end)
hic_mat = modify_dat(hic_mat, sbounds, skip_ind = 0, mu = mu0 * nratio * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true = tads_true[-5, ]  ## a gap
sub_tads <- data.frame('start' = sbounds[1:2],
'end' = sbounds[2:3]) * resl
hierTads = rbind(tads_true, sub_tads)
hierTads$dom_order = c(rep(1, nrow(tads_true)), rep(2, nrow(sub_tads)))
}
if(stype == 'nb-dist-hier'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
phi0 = 4
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rnbinom(1, mu = mu1  * dist^(-1), size = phi0 * mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i == skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = 5, mu0 * nratio)
# generate subTADs
start = 530
end = 705
sbounds = c(start, start + 50, start + 130, end)
hic_mat = modify_dat(hic_mat, sbounds, skip_ind = 0, mu = mu0 * nratio * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true <- tads_true[-5, ]  ## a gap
sub_tads <- data.frame('start' = sbounds[1:3],
'end' = sbounds[2:4]) * resl
hierTads <- rbind(tads_true, sub_tads)
hierTads$dom_order = c(rep(1, nrow(tads_true)), rep(2, nrow(sub_tads)))
}
if(stype == 'nb-dist'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
phi0 = 4
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rnbinom(1, mu = mu1  * dist^(-1), size = phi0 * mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i %in% skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = c(5, 7), mu0 * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true <- tads_true[-c(5, 7), ]  ## a gap
}
if(!grepl(stype, pattern = 'hier'))  {
hierTads = tads_true
hierTads$dom_order = 1
}
row.names(tads_true) = row.names(hierTads) = NULL
return(list("hic_mat" = hic_mat, "tads_true" = tads_true, 'hierTads' = hierTads))
}
data_simu = cmpfun(data_simu)
library(compiler)
library(Rcpp)
help(extrema)
# adjust tad boundary with subtad boundary to incease roubstness
adj_domains <- function(tads, subtads, hic_mat, over.thr = 5){
bds.tads = sort(unique(c(tads$start, tads$end)))
bds.subtads = sort(unique(c(subtads$start, subtads$end)))
# keep a tad boundary if there is a subtad boundary within over.thr bin of it
close.id = sapply(bds.tads, function(x) which.min(abs(bds.subtads - x)))
close.dist = sapply(bds.tads, function(x) min(abs(bds.subtads - x)))
matched.subtad.id = close.id[which(close.dist <= over.thr)]
final.bds = bds.subtads[matched.subtad.id]
final.tads = full_seg(final.bds)
final.tads = defineGap_local(final.tads, hic_mat)
# subtads should be dwell within tads
get_jaccards <- function(tads1, tads2){
# for each tad in tads1 find the closest one in tads2
tads1 = as.matrix(tads1)
tads2 = as.matrix(tads2)
jmax <- function(tad1, tads){
r1 = tad1[1] : tad1[2]
ids = which(tads[, 1] >= tad1[2] | tads[, 2] <= tad1[1])
if(length(ids) == 0){
tads = tads
}else if (length(ids) == nrow(tads)){
return(0)
}else{
tads = tads[-ids, ]
}
jacc <- function(tad2){
r2 = tad2[1] : tad2[2]
return(length(intersect(r1, r2))/length(union(r1, r2)))
}
if(class(tads) == 'matrix'){
js = max(apply(tads, 1, jacc))
}else{
js = jacc(tads)
}
return(js)
}
jac1 = apply(tads1, 1, jmax, tads = tads2)
#jac2 = apply(tads2, 1, jmax, tads = tads1)
return(jac1)
}
get_jaccards = cmpfun(get_jaccards)
subtads.jaccard = get_jaccards(subtads, final.tads)
final.subtads = subtads[subtads.jaccard == 1, ]
shared.id = sapply(1:nrow(final.subtads), function(x)
ifelse(any(final.tads$start == final.subtads$start[x] & final.tads$end == final.subtads$end[x]), 1, 0))
final.subtads = final.subtads[shared.id == 0]
return(list('tads' = final.tads, 'subtads' = final.subtads))
}
adj_domains = cmpfun(adj_domains)
subads = domains
subads = domains
final.tads = as.data.frame(final.tads)
tasd
tads
nrow(subtads)
adj_domains <- function(tads, subtads, hic_mat, over.thr = 5){
bds.tads = sort(unique(c(tads$start, tads$end)))
bds.subtads = sort(unique(c(subtads$start, subtads$end)))
# keep a tad boundary if there is a subtad boundary within over.thr bin of it
close.id = sapply(bds.tads, function(x) which.min(abs(bds.subtads - x)))
close.dist = sapply(bds.tads, function(x) min(abs(bds.subtads - x)))
matched.subtad.id = close.id[which(close.dist <= over.thr)]
final.bds = bds.subtads[matched.subtad.id]
final.tads = full_seg(final.bds)
final.tads = defineGap_local(final.tads, hic_mat)
final.tads = as.data.frame(final.tads)
# subtads should be dwell within tads
get_jaccards <- function(tads1, tads2){
# for each tad in tads1 find the closest one in tads2
tads1 = as.matrix(tads1)
tads2 = as.matrix(tads2)
jmax <- function(tad1, tads){
r1 = tad1[1] : tad1[2]
ids = which(tads[, 1] >= tad1[2] | tads[, 2] <= tad1[1])
if(length(ids) == 0){
tads = tads
}else if (length(ids) == nrow(tads)){
return(0)
}else{
tads = tads[-ids, ]
}
jacc <- function(tad2){
r2 = tad2[1] : tad2[2]
return(length(intersect(r1, r2))/length(union(r1, r2)))
}
if(class(tads) == 'matrix'){
js = max(apply(tads, 1, jacc))
}else{
js = jacc(tads)
}
return(js)
}
jac1 = apply(tads1, 1, jmax, tads = tads2)
#jac2 = apply(tads2, 1, jmax, tads = tads1)
return(jac1)
}
get_jaccards = cmpfun(get_jaccards)
subtads.jaccard = get_jaccards(subtads, final.tads)
final.subtads = subtads[subtads.jaccard == 1, ]
shared.id = sapply(1:nrow(final.subtads), function(x)
ifelse(any(final.tads$start == final.subtads$start[x] & final.tads$end == final.subtads$end[x]), 1, 0))
final.subtads = final.subtads[shared.id == 0, ]
return(list('tads' = final.tads, 'subtads' = final.subtads))
}
adj_domains = cmpfun(adj_domains)
tune_allPara
getwd()
library(devtools)
install_github("wbaopaul/rGMAP")
remove.packagfes('rGMAP')
remove.packages('rGMAP')
library(devtools)
install_github("wbaopaul/rGMAP")
library(rGMAP)
help(rGMAP)
remove.packages('rGMAP')
library(rGMAP)
help(rGMAP)
library(devtools)
install_github("wbaopaul/rGMAP")
library(rGMAP)
help(rGMAP)
remove.packages('rGMAP')
library(devtools)
install_github("wbaopaul/rGMAP")
library(rGMAP)
help(rGMAP)
help(rGMAP)
rGMAP
head(rGMAP)
remove.packages('rGMAP')
library(devtools)
install_github("wbaopaul/rGMAP")
library(rGMAP)
help(rGMAP)
remove.packages('rGMAP')
library(devtools)
install_github("wbaopaul/rGMAP")
library(rGMAP)
help(rGMAP)
sessionInfo()
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(data_simu)
library(rGMAP)
help(data_simu)
library(rGMAP)
help(data_simu)
help(rGMAP)
unloadNamespace('rGMAP')
getwd()
library(rGMAP)
help("data_simu")
library(rGMAP)
help("data_simu")
library(rGMAP)
help(rGMAP)
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
library(rGMAP)
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=rGMAP --output=manual.pdf --force --no-clean --internals")
library(rGMAP)
help("data_simu")
help("data_simu")
system("R CMD Rd2pdf . --title=rGMAP --output=manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
rGMAP
library(rGMAP)
rGMAP
library(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
help(plot\)
help(plot)
help(glm)
library(FitHiC)
library(ggplot2)
help(ggplot2)
remove.packages('rGMAP')
library(rGMAP)
res = rGMAP('/home/yuw1/Data/DixonHiC/mES/nij/nij.chr19', resl = 40)
dd = fread('/home/yuw1/Data/DixonHiC/mES/nij/nij.chr19', header = F)
library(data.table)
dd = fread('/home/yuw1/Data/DixonHiC/mES/nij/nij.chr19', header = F)
dim(dd)
dd = read.table('/home/yuw1/Data/DixonHiC/mES/nij/nij.chr19', header = F)
dim(dd)
library(rGMAP)
res = rGMAP('/home/yuw1/Data/DixonHiC/mES/nij/nij.chr19', resl = 40)
library(rGMAP)
res = rGMAP('/home/yuw1/Data/DixonHiC/mES/nij/nij.chr19', resl = 40)
res
res = rGMAP('/home/yuw1/Data/DixonHiC/mES/nij/nij.chr19', resl = 40000)
res
hic_rao_IMR90_chr15
res = rGMAP(hic_rao_IMR90_chr15, resl = 10000)
rse
res
res = rGMAP('/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_iced.matrix', index_file = '/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_abs.bed', resl = 40000)
help("read.table")
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F)
dim(dd)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, sep = '')
dim(dd)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, sep = ' ')
dim(dd)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, sep = "", dec = ".")
dim(dd)
help(fread)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, fill = !blank.lines.skip)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, fill = !blank.lines.skip, blank.lines.skip = T)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, fill = F)
dim(dd)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, flush = F)
dd = fread('/home/yuw1/Data/DixonHiC/IMR90/nij/nij.chr15', header = F, blank.lines.skip = T)
dim(dd)
haed(dd)
head(dd)
dd
dd[1:10, 1:10]
dim(dd)
library(rGMAP)
res = rGMAP('/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_iced.matrix', index_file = '/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_abs.bed', resl = 40000)
library(rGMAP)
res = rGMAP('/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_iced.matrix', index_file = '/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_abs.bed', resl = 40000)
dd = fread('/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_iced.matrix')
dd
dd[V1 == 66382]
dd[V2 == 66382]
index = fread('/home/yuw1/Data/HiC_processed/FL_BM/BM/40kb/BM_40000_abs.bed')
index
index[V1 == 'chrM']
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
system("R CMD Rd2pdf . --title=rGMAP --output=man/manual.pdf --force --no-clean --internals")
library(rGMAP)
rGMAP
res = rGMAP('/mnt/isilon/cbmi/tan_lab/yuw1/Data/DixonHiC/IMR90/nij/nij.chr21', resl = 40000)
res
hic_mat = fread('/mnt/isilon/cbmi/tan_lab/yuw1/Data/DixonHiC/IMR90/nij/nij.chr21', header = F)
library(data.table)
hic_mat = fread('/mnt/isilon/cbmi/tan_lab/yuw1/Data/DixonHiC/IMR90/nij/nij.chr21', header = F)
dim(hic_mat)
nrow(hic_mat)
col(hic_mat) != 3 & row(hic_mat) != col(hic_mat)
ncol(hic_mat) != 3 & nrow(hic_mat) != ncol(hic_mat)
library(rGMAP)
res = rGMAP('/mnt/isilon/cbmi/tan_lab/yuw1/Data/DixonHiC/IMR90/nij/nij.chr21', resl = 40000)
res
res = rGMAP('/mnt/isilon/cbmi/tan_lab/yuw1/Data/DixonHiC/IMR90/nij/nij.chr1', resl = 40000)
res
