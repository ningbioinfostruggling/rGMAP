library(rGMAP)
help(rGMAP)
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier') ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
data_simu <- function(stype = 'poisson', nratio = 2.5, mu0 = 200, resl = 1){
if(stype == 'poisson-dist'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rpois(1, mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i %in% skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = c(5, 7), mu0 * nratio)
tads_true <- data.frame('start' = bounds[1:ntad], 'end' = bounds[2:(ntad + 1)])
tads_true <- tads_true[-c(5, 7), ] * resl ## a gap
}
if(stype == 'poisson-dist-hier'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rpois(1, mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i == skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = 5, mu0 * nratio)
# generate subTADs
start = 530
end = 705
sbounds = c(start, start + 50, start + 130, end)
hic_mat = modify_dat(hic_mat, sbounds, skip_ind = 0, mu = mu0 * nratio * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true = tads_true[-5, ]  ## a gap
sub_tads <- data.frame('start' = sbounds[1:3],
'end' = sbounds[2:4]) * resl
hierTads = rbind(tads_true, sub_tads)
hierTads$dom_order = c(rep(1, nrow(tads_true)), rep(2, nrow(sub_tads)))
}
if(stype == 'poisson-dist-hier2'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rpois(1, mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i == skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = 5, mu0 * nratio)
# generate subTADs
start = 530
end = 705
sbounds = c(start, start + 25, end)
hic_mat = modify_dat(hic_mat, sbounds, skip_ind = 0, mu = mu0 * nratio * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true = tads_true[-5, ]  ## a gap
sub_tads <- data.frame('start' = sbounds[1:2],
'end' = sbounds[2:3]) * resl
hierTads = rbind(tads_true, sub_tads)
hierTads$dom_order = c(rep(1, nrow(tads_true)), rep(2, nrow(sub_tads)))
}
if(stype == 'nb-dist-hier'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
phi0 = 4
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rnbinom(1, mu = mu1  * dist^(-1), size = phi0 * mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i == skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = 5, mu0 * nratio)
# generate subTADs
start = 530
end = 705
sbounds = c(start, start + 50, start + 130, end)
hic_mat = modify_dat(hic_mat, sbounds, skip_ind = 0, mu = mu0 * nratio * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true <- tads_true[-5, ]  ## a gap
sub_tads <- data.frame('start' = sbounds[1:3],
'end' = sbounds[2:4]) * resl
hierTads <- rbind(tads_true, sub_tads)
hierTads$dom_order = c(rep(1, nrow(tads_true)), rep(2, nrow(sub_tads)))
}
if(stype == 'nb-dist'){
## TADs with gap and Hier
tbins = 1000  ## total bins
bounds = c(1, 120, 160, 215, 355, 440, 530, 705, 765, 850, 950, 1000)
bounds = sort(unique(bounds))
#mu0 = 5
ntad = length(bounds) - 1
n = max(bounds)
hic_mat  = matrix(0, n, n)
hic_mat = as.data.table(as.data.frame(hic_mat))
phi0 = 4
generateSparse_dat <- function(n1, mu1){
df = data.table('id1' = rep(1:(n1), (n1):1),
'id2' = do.call('c', sapply(1:(n1), function(x) (x):n1)))
df[, 'dist' := (id2 - id1)]
df[, dist := ifelse(dist == 0, 0.9, dist)]
df[, 'N' := rnbinom(1, mu = mu1  * dist^(-1), size = phi0 * mu1  * dist^(-1)), by = list(id1, id2)]
return(df)
}
df = generateSparse_dat(n, mu0)
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(hic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
hic_mat = as.matrix(hic_mat)
modify_dat <- function(hic_mat, bounds, skip_ind = 0, mu = 5){
ntad = length(bounds) - 1
sizes = diff(bounds) + 1
for(i in 1:ntad){
if(i %in% skip_ind) next
tn = sizes[i]
#t_mu = mu * (1 + min(sizes)/tn)
t_mu = mu
df = generateSparse_dat(tn, t_mu)
thic_mat  = matrix(0, tn, tn)
thic_mat = as.data.table(as.data.frame(thic_mat))
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id1[k]),
j = as.integer(df$id2[k]), value = df$N[k])
for(k in 1:nrow(df)) set(thic_mat, i = as.integer(df$id2[k]),
j = as.integer(df$id1[k]), value = df$N[k])
thic_mat = as.matrix(thic_mat)
start = bounds[i]
end = bounds[i+1]
hic_mat[start:end, start:end] = thic_mat
}
return(hic_mat)
}
## add TADs
hic_mat = modify_dat(hic_mat, bounds, skip_ind = c(5, 7), mu0 * nratio)
tads_true <- data.frame('start' = bounds[1:ntad],
'end' = bounds[2:(ntad + 1)]) * resl
tads_true <- tads_true[-c(5, 7), ]  ## a gap
}
if(!grepl(stype, pattern = 'hier'))  {
hierTads = tads_true
hierTads$dom_order = 1
}
row.names(tads_true) = row.names(hierTads) = NULL
return(list("hic_mat" = hic_mat, "tads_true" = tads_true, 'hierTads' = hierTads))
}
data_simu = cmpfun(data_simu)
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier') ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier', mu0=200, nratio=2.5) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier', mu0=200, nratio=2.5) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(data.table)
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier', mu0=200, nratio=2.5) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier') ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier',mu0=20) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier',mu0=20) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.9,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier',mu0=20) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.9, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier',mu0=20, nratio = 2) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.9, fcthr = 0.9,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier',mu0=20, nratio = 2) ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.9, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.9,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.9,
dom_order = 1, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
help(rGMAP)
library(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier') ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 400, hthr = 0.9, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
res = rGMAP(hic_mat, resl = 1, Bg_d = 400, hthr = 0.95, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
res = rGMAP(hic_mat, resl = 1, Bg_d = 400, hthr = 0.95, fcthr = 0.9,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
help(rGMAP)
set.seed(1)
simu_dat = data_simu('poisson-dist-hier') ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, Bg_d = 200, hthr = 0.9, fcthr = 0.95,
dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
res = rGMAP(hic_mat, resl = 1, dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
library(rGMAP)
help(rGMAP)
simu_dat = data_simu('poisson-dist-hier') ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
set.seed(1)
simu_dat = data_simu('poisson-dist-hier') ## generate a synthetic data
hic_mat = simu_dat$hic_mat
true_tads = simu_dat$tads_true
hier_true = simu_dat$hierTads
true_tads
hier_true
res = rGMAP(hic_mat, resl = 1, dom_order = 2, logt = T)
hierTads = res$hierTads  ## predicted hierarchical domains
hierTads
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(GMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
library(rGMAP)
help(rGMAP)
